package com.planeja.controller;

import com.planeja.dto.LessonPlanDTO;
import com.planeja.model.LessonPlan;
import com.planeja.model.LessonPlanRequest;
import com.planeja.model.User;
import com.planeja.service.LessonPlanService;
import com.planeja.service.UserService;
import com.planeja.service.ClassProfileService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/api/lesson-plans")
public class LessonPlanController {

    private static final Logger logger = LoggerFactory.getLogger(LessonPlanController.class);

    @Autowired
    private LessonPlanService lessonPlanService;

    @Autowired
    private UserService userService;

    @Autowired
    private ClassProfileService classProfileService;

    @Autowired
    private ObjectMapper objectMapper;

    // Existing generate endpoint, modified to save the plan
    @PostMapping("/generate")
    public ResponseEntity<LessonPlanDTO> generateLessonPlan(@RequestBody LessonPlanRequest request) {
        logger.info("Received LessonPlanRequest: {}", request);

        LessonPlan generatedLessonPlan = lessonPlanService.generateLessonPlan(request);
        logger.info("LessonPlan generated by service (before final processing): {}", generatedLessonPlan);

        User user = userService.findById(request.getUserId())
                .orElseThrow(() -> new IllegalArgumentException("User not found"));
        generatedLessonPlan.setUser(user);

        // Ensure all fields from the original request are copied to the generated plan
        // This is crucial because GeminiService only populates generatedContent and theme
        generatedLessonPlan.setDiscipline(request.getDisciplina());
        generatedLessonPlan.setLevel(request.getNivel());
        generatedLessonPlan.setDurationMinutes(request.getDuracao());
        generatedLessonPlan.setQuantity(request.getQuantidade());
        try {
            generatedLessonPlan.setResources(objectMapper.writeValueAsString(request.getRecursos()));
        } catch (JsonProcessingException e) {
            generatedLessonPlan.setResources("[]"); // Default to empty array on error
        }

        // Handle class profile or direct class details
        if (request.getSalvarPerfil() != null && request.getSalvarPerfil()) {
            // Logic to save or link to a class profile
            // For now, we'll just use the direct details
        }
        generatedLessonPlan.setClassSize(request.getTamanho());
        try {
            generatedLessonPlan.setEducationLevels(objectMapper.writeValueAsString(request.getEscolarizacao()));
            generatedLessonPlan.setAgeRanges(objectMapper.writeValueAsString(request.getFaixas()));
            generatedLessonPlan.setLifeContexts(objectMapper.writeValueAsString(request.getContextos()));
            generatedLessonPlan.setProfessionalAreas(objectMapper.writeValueAsString(request.getProfissoes()));
            generatedLessonPlan.setOtherProfiles(objectMapper.writeValueAsString(request.getOutrosPerfis()));
        } catch (JsonProcessingException e) {
            generatedLessonPlan.setEducationLevels("[]");
            generatedLessonPlan.setAgeRanges("[]");
            generatedLessonPlan.setLifeContexts("[]");
            generatedLessonPlan.setProfessionalAreas("[]");
            generatedLessonPlan.setOtherProfiles("[]");
        }
        generatedLessonPlan.setObservations(request.getObservacoes());
        generatedLessonPlan.setGenerationTimestamp(LocalDateTime.now());

        logger.info("LessonPlan before saving: {}", generatedLessonPlan);
        LessonPlan savedPlan = lessonPlanService.save(generatedLessonPlan);
        logger.info("LessonPlan saved: {}", savedPlan);
        return new ResponseEntity<>(convertToDto(savedPlan), HttpStatus.CREATED);
    }

    @GetMapping
    public List<LessonPlanDTO> getAllLessonPlans() {
        return lessonPlanService.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}")
    public ResponseEntity<LessonPlanDTO> getLessonPlanById(@PathVariable UUID id) {
        Optional<LessonPlan> lessonPlan = lessonPlanService.findById(id);
        return lessonPlan.map(lp -> ResponseEntity.ok(convertToDto(lp)))
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<LessonPlanDTO> createLessonPlan(@RequestBody LessonPlanDTO lessonPlanDTO) {
        try {
            LessonPlan lessonPlan = convertToEntity(lessonPlanDTO);
            LessonPlan savedLessonPlan = lessonPlanService.save(lessonPlan);
            return new ResponseEntity<>(convertToDto(savedLessonPlan), HttpStatus.CREATED);
        } catch (JsonProcessingException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<LessonPlanDTO> updateLessonPlan(@PathVariable UUID id, @RequestBody LessonPlanDTO lessonPlanDTO) {
        Optional<LessonPlan> existingLessonPlan = lessonPlanService.findById(id);
        if (existingLessonPlan.isPresent()) {
            try {
                LessonPlan lessonPlan = existingLessonPlan.get();
                // Update fields from DTO
                lessonPlan.setDiscipline(lessonPlanDTO.getDiscipline());
                lessonPlan.setLevel(lessonPlanDTO.getLevel());
                lessonPlan.setTheme(lessonPlanDTO.getTheme());
                lessonPlan.setDurationMinutes(lessonPlanDTO.getDurationMinutes());
                lessonPlan.setQuantity(lessonPlanDTO.getQuantity());
                lessonPlan.setResources(objectMapper.writeValueAsString(lessonPlanDTO.getResources()));
                lessonPlan.setClassSize(lessonPlanDTO.getClassSize());
                lessonPlan.setEducationLevels(objectMapper.writeValueAsString(lessonPlanDTO.getEducationLevels()));
                lessonPlan.setAgeRanges(objectMapper.writeValueAsString(lessonPlanDTO.getAgeRanges()));
                lessonPlan.setLifeContexts(objectMapper.writeValueAsString(lessonPlanDTO.getLifeContexts()));
                lessonPlan.setProfessionalAreas(objectMapper.writeValueAsString(lessonPlanDTO.getProfessionalAreas()));
                lessonPlan.setOtherProfiles(objectMapper.writeValueAsString(lessonPlanDTO.getOtherProfiles()));
                lessonPlan.setObservations(lessonPlanDTO.getObservations());
                lessonPlan.setGeneratedContent(lessonPlanDTO.getGeneratedContent());

                // Handle user and class profile relationships
                if (lessonPlanDTO.getUserId() != null) {
                    userService.findById(lessonPlanDTO.getUserId()).ifPresent(lessonPlan::setUser);
                }
                if (lessonPlanDTO.getClassProfileId() != null) {
                    classProfileService.findById(lessonPlanDTO.getClassProfileId()).ifPresent(lessonPlan::setClassProfile);
                }

                LessonPlan updatedLessonPlan = lessonPlanService.save(lessonPlan);
                return ResponseEntity.ok(convertToDto(updatedLessonPlan));
            } catch (JsonProcessingException e) {
                return ResponseEntity.badRequest().build();
            }
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteLessonPlan(@PathVariable UUID id) {
        if (lessonPlanService.findById(id).isPresent()) {
            lessonPlanService.deleteById(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping("/{id}/feedback")
    public ResponseEntity<LessonPlanDTO> submitFeedback(@PathVariable UUID id, @RequestBody LessonPlanDTO lessonPlanDTO) {
        Optional<LessonPlan> existingLessonPlan = lessonPlanService.findById(id);
        if (existingLessonPlan.isPresent()) {
            LessonPlan lessonPlan = existingLessonPlan.get();
            if (lessonPlanDTO.getRating() != null) {
                lessonPlan.setRating(lessonPlanDTO.getRating());
            }
            if (lessonPlanDTO.getFeedbackText() != null) {
                lessonPlan.setFeedbackText(lessonPlanDTO.getFeedbackText());
            }
            LessonPlan updatedLessonPlan = lessonPlanService.save(lessonPlan);
            return ResponseEntity.ok(convertToDto(updatedLessonPlan));
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    private LessonPlanDTO convertToDto(LessonPlan lessonPlan) {
        LessonPlanDTO dto = new LessonPlanDTO();
        dto.setId(lessonPlan.getId());
        dto.setUserId(lessonPlan.getUser().getId());
        dto.setDiscipline(lessonPlan.getDiscipline());
        dto.setLevel(lessonPlan.getLevel());
        dto.setTheme(lessonPlan.getTheme());
        dto.setDurationMinutes(lessonPlan.getDurationMinutes());
        dto.setQuantity(lessonPlan.getQuantity());
        try {
            dto.setResources(objectMapper.readValue(lessonPlan.getResources(), List.class));
        } catch (JsonProcessingException e) {
            dto.setResources(List.of());
        }
        if (lessonPlan.getClassProfile() != null) {
            dto.setClassProfileId(lessonPlan.getClassProfile().getId());
        }
        dto.setClassSize(lessonPlan.getClassSize());
        try {
            dto.setEducationLevels(objectMapper.readValue(lessonPlan.getEducationLevels(), List.class));
            dto.setAgeRanges(objectMapper.readValue(lessonPlan.getAgeRanges(), List.class));
            dto.setLifeContexts(objectMapper.readValue(lessonPlan.getLifeContexts(), List.class));
            dto.setProfessionalAreas(objectMapper.readValue(lessonPlan.getProfessionalAreas(), List.class));
            dto.setOtherProfiles(objectMapper.readValue(lessonPlan.getOtherProfiles(), List.class));
        } catch (JsonProcessingException e) {
            dto.setEducationLevels(List.of());
            dto.setAgeRanges(List.of());
            dto.setLifeContexts(List.of());
            dto.setProfessionalAreas(List.of());
            dto.setOtherProfiles(List.of());
        }
        dto.setObservations(lessonPlan.getObservations());
        dto.setGeneratedContent(lessonPlan.getGeneratedContent());
        dto.setGenerationTimestamp(lessonPlan.getGenerationTimestamp());
        return dto;
    }

    private LessonPlan convertToEntity(LessonPlanDTO dto) throws JsonProcessingException {
        LessonPlan lessonPlan = new LessonPlan();
        if (dto.getId() != null) {
            lessonPlan.setId(dto.getId());
        }
        User user = userService.findById(dto.getUserId())
                .orElseThrow(() -> new IllegalArgumentException("User not found"));
        lessonPlan.setUser(user);
        lessonPlan.setDiscipline(dto.getDiscipline());
        lessonPlan.setLevel(dto.getLevel());
        lessonPlan.setTheme(dto.getTheme());
        lessonPlan.setDurationMinutes(dto.getDurationMinutes());
        lessonPlan.setQuantity(dto.getQuantity());
        lessonPlan.setResources(objectMapper.writeValueAsString(dto.getResources()));
        if (dto.getClassProfileId() != null) {
            classProfileService.findById(dto.getClassProfileId()).ifPresent(lessonPlan::setClassProfile);
        }
        lessonPlan.setClassSize(dto.getClassSize());
        lessonPlan.setEducationLevels(objectMapper.writeValueAsString(dto.getEducationLevels()));
        lessonPlan.setAgeRanges(objectMapper.writeValueAsString(dto.getAgeRanges()));
        lessonPlan.setLifeContexts(objectMapper.writeValueAsString(dto.getLifeContexts()));
        lessonPlan.setProfessionalAreas(objectMapper.writeValueAsString(dto.getProfessionalAreas()));
        lessonPlan.setOtherProfiles(objectMapper.writeValueAsString(dto.getOtherProfiles()));
        lessonPlan.setObservations(dto.getObservations());
        lessonPlan.setGeneratedContent(dto.getGeneratedContent());
        lessonPlan.setGenerationTimestamp(dto.getGenerationTimestamp());
        lessonPlan.setRating(dto.getRating());
        lessonPlan.setFeedbackText(dto.getFeedbackText());
        return lessonPlan;
    }
}